{"version":3,"sources":["config.js","Components/Services/token-service.js","Components/NavBar/NavBar.js","Components/LandingPage /LandingPage.js","Components/Services/auth-api-service.js","Components/LoginForm/LoginForm.js","Components/About/About.js","Components/Google Map/GooglePlaces.js","App.js","serviceWorker.js","index.js"],"names":["TokenService","saveAuthToken","token","window","sessionStorage","setItem","config","getAuthToken","getItem","clearAuthToken","removeItem","hasAuthToken","makeBasicAuthToken","userName","password","btoa","NavBar","state","clicked","handleLogoutClick","clearUserName","onClick","setState","this","to","className","renderLogoutLink","renderLoginLink","Component","LandingPage","redirect","where","switchPage","link","AuthApiService","postLogin","user_name","fetch","method","headers","body","JSON","stringify","then","res","ok","json","e","Promise","reject","postUser","user","LoginForm","props","handleJwtLoginAuth","preventDefault","target","return_user","return_pass","error","value","authToken","onValidLogin","location","catch","alert","newUser","right","emailAddress","button","handleClick","defaultProps","onValidSignUp","SignUp","type","required","SignIn","About","Geocode","setApiKey","enableDebug","LocationSearchModal","address","city","area","zoom","height","mapPosition","lat","lng","markerPosition","getCity","addressArray","i","length","types","long_name","getArea","j","getState","onChange","event","name","onInfoWindowClose","onMarkerDragEnd","newLat","latLng","newLng","fromLatLng","response","results","formatted_address","address_components","console","onPlaceSelected","place","log","latValue","geometry","lngValue","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","AsyncMap","withScriptjs","withGoogleMap","defaultZoom","defaultCenter","google","draggable","onDragEnd","onClose","style","padding","margin","width","paddingLeft","marginTop","marginBottom","maxWidth","googleMapURL","loadingElement","containerElement","mapElement","React","App","stores","path","component","exact","GooglePlaces","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"iYAAe,EACG,sBADH,EAEA,yBCCTA,EAAe,CACjBC,cADiB,SACHC,GACVC,OAAOC,eAAeC,QAAQC,EAAkBJ,IAEpDK,aAJiB,WAKb,OAAOJ,OAAOC,eAAeI,QAAQF,IAEzCG,eAPiB,WAQbN,OAAOC,eAAeM,WAAWJ,IAErCK,aAViB,WAWb,QAASX,EAAaO,gBAE1BK,mBAbiB,SAaEC,EAAUC,GACzB,OAAOX,OAAOY,KAAP,UAAeF,EAAf,YAA2BC,MAI3Bd,I,+BChBMgB,E,4MACnBC,MAAM,CACJC,SAAS,G,EAGbC,kBAAoB,WACpBnB,EAAaS,iBACbT,EAAaoB,iB,EAsBbC,QAAU,WACN,EAAKC,SAAS,CACVJ,SAAU,EAAKD,MAAMC,W,iEApB7B,OACI,kBAAC,IAAD,CACIG,QAASE,KAAKJ,kBACdK,GAAG,KAFP,Y,wCASJ,OACI,kBAAC,IAAD,CACIA,GAAG,UADP,Y,+BAeiBD,KAAKN,MAAhBC,QAEN,OACI,6BAKI,wBAAIO,UAAU,UACV,4BAAI,kBAAC,IAAD,CAAMD,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,UACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,SAAT,uBACHxB,EAAaW,eAAiB,4BAAI,kBAAC,IAAD,CAAMa,GAAG,YAAT,eAA6C,KAChF,4BAAKxB,EAAaW,eACZY,KAAKG,mBACLH,KAAKI,mBACX,kBAAC,IAAD,CAAMH,GAAG,Y,GArDWI,aCCfC,G,mNACjBZ,MAAQ,CACJa,UAAU,EACVC,MAAO,I,EAEXC,WAAa,SAAEC,GACE,SAATA,GAAmBjC,EAAaW,iBAChCsB,EAAO,eAEX,EAAKX,SAAS,CACVQ,UAAY,EAAKb,MAAMa,SACvBC,MAAOE,K,uDAIL,IAAD,SACyBV,KAAKN,MAAzBa,EADL,EACKA,SAAUC,EADf,EACeA,MAEpB,OAAID,EACI,kBAAC,IAAD,CAAUN,GAAE,WAAMO,KAItB,6BACI,kBAAC,EAAD,MACA,6BAASN,UAAU,UACnB,yBAAKA,UAAU,SACf,4CACA,qFACA,4BAAQJ,QAAS,kBAAM,EAAKW,WAAW,WAAvC,sB,GA7ByBJ,cC6B1BM,EAjCQ,CAEnBC,UAFmB,YAEe,IAAvBC,EAAsB,EAAtBA,UAAWtB,EAAW,EAAXA,SAClB,OAAOuB,MAAM,GAAD,OAAI/B,EAAJ,eAAsC,CAC9CgC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAACN,YAAWtB,eAEhC6B,MAAK,SAAAC,GACF,OAASA,EAAIC,GAEPD,EAAIE,OADJF,EAAIE,OAAOH,MAAK,SAAAI,GAAC,OAAIC,QAAQC,OAAOF,UAKtDG,SAjBmB,SAiBVC,GACL,OAAOd,MAAM,GAAD,OAAI/B,EAAJ,UAAiC,CACzCgC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUS,KAEpBR,MAAK,SAAAC,GACF,OAASA,EAAIC,GAEPD,EAAIE,OADJF,EAAIE,OAAOH,MAAK,SAAAI,GAAC,OAAIC,QAAQC,OAAOF,WCvBpDK,G,yDAMF,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAkBRC,mBAAqB,SAAAP,GACnBA,EAAEQ,iBADsB,MAEWR,EAAES,OAA9BC,EAFiB,EAEjBA,YAAaC,EAFI,EAEJA,YAEpB,EAAKpC,SAAS,CACVqC,MAAO,OAGXzB,EAAeC,UAAU,CACrBC,UAAWqB,EAAYG,MACvB9C,SAAU4C,EAAYE,QAErBjB,MAAK,SAAAC,GACFa,EAAYG,MAAQ,GACpBF,EAAYE,MAAQ,GACpB5D,EAAaC,cAAc2C,EAAIiB,WAC/B,EAAKR,MAAMS,kBAEdnB,MAAK,WACFxC,OAAO4D,SAAP,iBAEHC,OAAM,SAAApB,GACH,EAAKtB,SAAS,CACVqC,MAAOM,MAAM,6EAxCzB,EAAKhD,MAAQ,CACXiD,SAAS,EACTC,MAAO,EACPC,aAAc,GACdtD,SAAW,IANI,E,wDAUPuD,GACP9C,KAAKN,MAAMiD,SAAqB,UAAVG,EACvB9C,KAAKD,SAAS,CAAC4C,SAAS,IACf3C,KAAKN,MAAMiD,SAAqB,UAAVG,GAC/B9C,KAAKD,SAAS,CAAC4C,SAAS,M,+BAiClB,IAAD,OACP,OACO,yBAAKzC,UAAU,iBACZ,yBAAKA,UAAU,cACX,yBACEA,UAAYF,KAAKN,MAAMiD,QAAU,eAAiB,iBAClD7C,QAAS,kBAAM,EAAKiD,YAAY,YAEhC,4BAAQ7C,UAAU,gBAAlB,cAEF,yBACEA,UAAYF,KAAKN,MAAMiD,QAAU,iBAAmB,eACpD7C,QAAS,kBAAM,EAAKiD,YAAY,YAEhC,4BAAQ7C,UAAU,gBAAlB,eAGN,yBAAKA,UAAU,YAEXF,KAAKN,MAAMiD,QAAU,kBAAC,EAAD,MAAY,kBAAC,EAAD,OAGrC,yBAAKzC,UAAU,cACb,4BAAQA,UAAU,YAAlB,IAAgCF,KAAKN,MAAMiD,QAAU,SAAW,QAAhE,W,GA5EMtC,cAAlBwB,EACGmB,aAAe,CACpBC,cAAe,aACfV,aAAc,c,IAmFVW,E,uKAEF,OACE,yBAAKhD,UAAU,mBACb,wBAAIA,UAAU,cAAd,iBACA,yBAAKA,UAAU,qBACb,2BAAOiD,KAAK,OAAOjD,UAAU,YAAYkD,UAAQ,IACjD,2BAAOlD,UAAU,cAAjB,eAEF,yBAAKA,UAAU,qBACb,2BAAOiD,KAAK,OAAOjD,UAAU,WAAWkD,UAAQ,IAChD,2BAAOlD,UAAU,cAAjB,cAEF,yBAAKA,UAAU,gBACb,2BAAOiD,KAAK,OAAOjD,UAAU,eAAekD,UAAQ,IACpD,2BAAOlD,UAAU,cAAjB,kBAEF,yBAAKA,UAAU,gBACb,2BAAOiD,KAAK,WAAWjD,UAAU,WAAWkD,UAAQ,IACpD,2BAAOlD,UAAU,cAAjB,kB,GAnBWG,aA0BfgD,E,uKAEF,OACE,yBAAKnD,UAAU,mBACb,wBAAIA,UAAU,cAAd,gBACA,yBAAKA,UAAU,gBACb,2BAAOiD,KAAK,OAAOjD,UAAU,WAAWkD,UAAQ,IAChD,2BAAOlD,UAAU,cAAjB,cAEF,yBAAKA,UAAU,gBACb,2BAAOiD,KAAK,OAAOjD,UAAU,WAAWkD,UAAQ,IAChD,2BAAOlD,UAAU,cAAjB,kB,GAXWG,aAmBRwB,ICrIMyB,G,8KAEb,OACI,6BACC,kBAAC,EAAD,MACD,6BAASpD,UAAU,UACf,yBAAKA,UAAU,SACnB,4CACA,qFACA,+HACA,wIAEA,+LAED,6W,GAdwBG,c,oDCMnCkD,IAAQC,UAAU,2CAClBD,IAAQE,c,IA8OOC,E,4MA1OXhE,MAAQ,CACJiE,QAAS,GACTC,KAAM,GACNC,KAAM,GACNnE,MAAO,GACPoE,KAAM,GACNC,OAAQ,IACRC,YAAa,CACTC,IAAK,EACLC,IAAK,GAETC,eAAgB,CACZF,IAAK,EACLC,IAAK,I,EA8CbE,QAAU,SAACC,GAEP,IADA,IACSC,EAAI,EAAGA,EAAID,EAAaE,OAAQD,IACrC,GAAID,EAAaC,GAAGE,MAAM,IAAM,gCAAkCH,EAAaC,GAAGE,MAAM,GAEpF,OADOH,EAAaC,GAAGG,W,EAMnCC,QAAU,SAACL,GAEP,IADA,IACSC,EAAI,EAAGA,EAAID,EAAaE,OAAQD,IACrC,GAAID,EAAaC,GAAGE,MAAM,GACtB,IAAK,IAAIG,EAAI,EAAGA,EAAIN,EAAaC,GAAGE,MAAMD,OAAQI,IAC9C,GAAI,wBAA0BN,EAAaC,GAAGE,MAAMG,IAAM,aAAeN,EAAaC,GAAGE,MAAMG,GAE3F,OADON,EAAaC,GAAGG,W,EAQ3CG,SAAW,SAACP,GAER,IADA,IACSC,EAAI,EAAGA,EAAID,EAAaE,OAAQD,IACrC,IAAK,IAAIA,EAAI,EAAGA,EAAID,EAAaE,OAAQD,IACrC,GAAID,EAAaC,GAAGE,MAAM,IAAM,gCAAkCH,EAAaC,GAAGE,MAAM,GAEpF,OADQH,EAAaC,GAAGG,W,EAOxCI,SAAW,SAACC,GACR,EAAK/E,SAAL,eAAiB+E,EAAM7C,OAAO8C,KAAOD,EAAM7C,OAAOI,S,EAGtD2C,kBAAoB,SAACF,K,EAErBG,gBAAkB,SAACH,GACf,IAAII,EAASJ,EAAMK,OAAOlB,MACtBmB,EAASN,EAAMK,OAAOjB,MAE1BX,IAAQ8B,WAAWH,EAAQE,GAAQhE,MAC/B,SAAAkE,GACI,IAAM3B,EAAU2B,EAASC,QAAQ,GAAGC,kBAChCnB,EAAeiB,EAASC,QAAQ,GAAGE,mBACnC7B,EAAO,EAAKQ,QAAQC,GACpBR,EAAO,EAAKa,QAAQL,GACpB3E,EAAQ,EAAKkF,SAASP,GAC1B,EAAKtE,SAAS,CACV4D,QAAUA,GAAqB,GAC/BE,KAAOA,GAAe,GACtBD,KAAOA,GAAe,GACtBlE,MAAQA,GAAiB,GACzByE,eAAgB,CACZF,IAAKiB,EACLhB,IAAKkB,GAETpB,YAAa,CACTC,IAAKiB,EACLhB,IAAKkB,QAIjB,SAAAhD,GACIsD,QAAQtD,MAAMA,O,EAK1BuD,gBAAkB,SAACC,GACfF,QAAQG,IAAI,MAAOD,GACnB,IAAMjC,EAAUiC,EAAMJ,kBAClBnB,EAAeuB,EAAMH,mBACrB7B,EAAO,EAAKQ,QAAQC,GACpBR,EAAO,EAAKa,QAAQL,GACpB3E,EAAQ,EAAKkF,SAASP,GACtByB,EAAWF,EAAMG,SAASvD,SAASyB,MACnC+B,EAAWJ,EAAMG,SAASvD,SAAS0B,MAEvCwB,QAAQG,IAAI,WAAYC,GACxBJ,QAAQG,IAAI,WAAYG,GAGxB,EAAKjG,SAAS,CACV4D,QAAUA,GAAqB,GAC/BE,KAAOA,GAAe,GACtBD,KAAOA,GAAe,GACtBlE,MAAQA,GAAiB,GACzByE,eAAgB,CACZF,IAAK6B,EACL5B,IAAK8B,GAEThC,YAAa,CACTC,IAAK6B,EACL5B,IAAK8B,M,kEA5II,IAAD,OACZC,UAAUC,YACVD,UAAUC,YAAYC,oBAAmB,SAAAC,GACrC,EAAKrG,SAAS,CACViE,YAAa,CACTC,IAAKmC,EAASC,OAAOC,SACrBpC,IAAKkC,EAASC,OAAOE,WAEzBpC,eAAgB,CACZF,IAAKmC,EAASC,OAAOC,SACrBpC,IAAKkC,EAASC,OAAOE,aAGzB,WACIhD,IAAQ8B,WAAWe,EAASC,OAAOC,SAAUF,EAASC,OAAOE,WAAWnF,MACpE,SAAAkE,GACII,QAAQG,IAAIP,GACZ,IAAM3B,EAAU2B,EAASC,QAAQ,GAAGC,kBAChCnB,EAAeiB,EAASC,QAAQ,GAAGE,mBACnC7B,EAAO,EAAKQ,QAAQC,GACpBR,EAAO,EAAKa,QAAQL,GACpB3E,EAAQ,EAAKkF,SAASP,GAC1BqB,QAAQG,IAAI,OAAQjC,EAAMC,EAAMnE,GAChC,EAAKK,SAAS,CACV4D,QAAUA,GAAqB,GAC/BE,KAAOA,GAAe,GACtBD,KAAOA,GAAe,GACtBlE,MAAQA,GAAiB,QAGjC,SAAA0C,GACIsD,QAAQtD,MAAMA,YAOlCsD,QAAQtD,MAAM,mD,+BA4GZ,IAAD,OACCoE,EAAWC,uBACbC,yBACI,SAAA5E,GAAK,OACD,kBAAC,YAAD,CACI6E,YAAa,EAAKjH,MAAMoE,KACxB8C,cAAe,CAAE3C,IAAK,EAAKvE,MAAMsE,YAAYC,IAAKC,IAAK,EAAKxE,MAAMsE,YAAYE,MAI9E,kBAAC,SAAD,CACI2C,OAAQ,EAAK/E,MAAM+E,OACnB9B,KAAM,eACN+B,WAAW,EACXC,UAAW,EAAK9B,gBAChBmB,SAAU,CAAEnC,IAAK,EAAKvE,MAAMyE,eAAeF,IAAKC,IAAK,EAAKxE,MAAMyE,eAAeD,OAEnF,kBAAC,aAAD,CACI8C,QAAS,EAAKhC,kBACdoB,SAAU,CAAEnC,IAAM,EAAKvE,MAAMyE,eAAeF,IAAM,MAASC,IAAK,EAAKxE,MAAMyE,eAAeD,MAE1F,6BACI,0BAAM+C,MAAO,CAAEC,QAAS,EAAGC,OAAQ,IAAM,EAAKzH,MAAMiE,WAG5D,kBAAC,SAAD,MACA,kBAAC,IAAD,CACIsD,MAAO,CACHG,MAAO,OACPrD,OAAQ,OACRsD,YAAa,OACbC,UAAW,MACXC,aAAc,QAElB5B,gBAAiB,EAAKA,gBACtBnB,MAAO,CAAC,oBAO5B,OACI,yBAAKyC,MAAO,CAAEC,QAAS,OAAQC,OAAQ,SAAUK,SAAU,MACvD,kBAAC,EAAD,MAQA,kBAAChB,EAAD,CACIiB,aAAa,uGACbC,eACI,yBAAKT,MAAO,CAAElD,OAAO,UAEzB4D,iBACI,yBAAKV,MAAO,CAAElD,OAAQ/D,KAAKN,MAAMqE,UAErC6D,WACI,yBAAKX,MAAO,CAAElD,OAAO,iB,GAnOX8D,IAAMxH,WCgDzByH,E,4MAhDbpI,MAAS,CACPqI,OAAQ,I,kEAGW,IAAD,OACbtJ,EAAaO,gBAIrB8B,MAAM,GAAD,OAAI/B,EAAJ,WAAiC,CACpCiC,QAAS,CACP,cAAgB,UAAhB,OAA2BvC,EAAaO,mBAI3CoC,MAAK,SAAAC,GACL,OAAKA,EAAIC,GAGFD,EAAIE,OAFFF,EAAIE,OAAOH,MAAK,SAAAI,GAAC,OAAIC,QAAQC,OAAOF,SAI9CJ,MAAK,SAAA2G,GACJ,EAAKhI,SAAS,CAACgI,cAEhBtF,OAAM,SAAAL,GACLsD,QAAQtD,MAAM,CAACA,e,+BASf,OACE,0BAAMlC,UAAU,OAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO8H,KAAK,UAAUC,UAAWxI,IAClC,kBAAE,IAAF,CAAQyI,OAAK,EAACF,KAAK,IAAIC,UAAW3H,IAClC,kBAAE,IAAF,CAAQ4H,OAAK,EAACF,KAAK,SAASC,UAAW3E,IACtC,kBAAC,IAAD,CAAO0E,KAAK,SAASC,UAAWpG,IAChC,kBAAC,IAAD,CAAOmG,KAAK,QAAQC,UAAWE,U,GA1CnB9H,aCAE+H,QACW,cAA7BxJ,OAAO4D,SAAS6F,UAEe,UAA7BzJ,OAAO4D,SAAS6F,UAEhBzJ,OAAO4D,SAAS6F,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBzC,WACrBA,UAAU0C,cAAcC,MACrBxH,MAAK,SAAAyH,GACJA,EAAaC,gBAEdrG,OAAM,SAAAL,GACLsD,QAAQtD,MAAMA,EAAM2G,c","file":"static/js/main.14ae5747.chunk.js","sourcesContent":["export default {\n    API_ENDPOINT: \"localhost:3000/api`\",\n    TOKEN_KEY: 'snap-client-auth-login',\n    // USER_NAME:\n    // USER_ID:,\n}","\nimport config from '../../config';\n\nconst TokenService = {\n    saveAuthToken(token) {\n        window.sessionStorage.setItem(config.TOKEN_KEY, token);\n    },\n    getAuthToken() {\n        return window.sessionStorage.getItem(config.TOKEN_KEY);\n    },\n    clearAuthToken() {\n        window.sessionStorage.removeItem(config.TOKEN_KEY);\n    }, \n    hasAuthToken() {\n        return !!TokenService.getAuthToken();\n    },\n    makeBasicAuthToken(userName, password) {\n        return window.btoa(`${userName}:${password}`);\n    },\n};\n\nexport default TokenService;","import React, { Component } from 'react';\nimport './NavBar.css';\nimport { Link } from 'react-router-dom';\nimport TokenService from '../Services/token-service';\n\nexport default class NavBar extends Component {\n  state={\n    clicked: false\n}\n\nhandleLogoutClick = () => {\nTokenService.clearAuthToken()\nTokenService.clearUserName()\n}\n\nrenderLogoutLink() {\nreturn (\n    <Link\n        onClick={this.handleLogoutClick}\n        to='/'>\n        Logout\n    </Link>\n)\n}\n\nrenderLoginLink() {\nreturn (\n    <Link\n        to='/login'>\n        Log in\n    </Link>\n)\n}\n\nonClick = () => {\n    this.setState({\n        clicked: !this.state.clicked\n    })\n}\n\nrender () {\n\n    const{clicked} = this.state\n\n    return (\n        <div>\n\n            {/* <Hamburger display={clicked} click={this.onClick} \n            status={ TokenService.hasAuthToken() ? <Link onClick={this.handleLogoutClick} to='/'>Logout</Link> : <Link to='/login'>Log in</Link>}/> */}\n\n            <ul className=\"navbar\">\n                <li><Link to=\"/\">Home</Link></li>\n                <li><Link to=\"/about\">About</Link></li>\n                <li><Link to=\"/find\">Find SNAP retailer</Link></li>\n                {TokenService.hasAuthToken() ? <li><Link to='/account'>My Account</Link></li> : null}\n                <li>{TokenService.hasAuthToken()\n                    ? this.renderLogoutLink()\n                    : this.renderLoginLink()}</li>\n                <Link to='/'></Link>\n            </ul>\n        </div>\n    )\n}\n}\n\n\n\n\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport './LandingPage.css';\nimport TokenService from '../Services/token-service';\nimport NavBar from '../NavBar/NavBar';\n\nexport default class LandingPage extends Component {\n    state = {\n        redirect: false,\n        where: ''\n    }\n    switchPage = ( link ) => {\n        if (link === 'Home' && TokenService.hasAuthToken()){\n            link = 'LandingPage'\n        }\n        this.setState({\n            redirect: (!this.state.redirect),\n            where: link\n        })\n        return;\n    }\n    render() {\n          const { redirect, where } = this.state;\n\n        if (redirect) {\n         return <Redirect to={`/${where}`}/>\n        }\n\n        return (\n            <div>\n                <NavBar />\n                <section className=\"banner\"> \n                <div className=\"Cover\">\n                <h2>SNAP Locator</h2>\n                <p>Connect with SNAP retailers and locations in your area</p>\n                <button onClick={() => this.switchPage('Login')}>Get started</button>\n                {/* Users/ashley/Desktop/Thinkful2/snap-locator-client/src/Components/LoginForm/LoginForm.js */}\n                    </div>\n                </section>\n </div>\n )\n}\n}\n   ","import config from '../../config';\n\nconst AuthApiService = {\n    // client-side POST for handling user logins. //\n    postLogin({user_name, password}) {\n        return fetch(`${config.API_ENDPOINT}/auth/login`, {\n            method: 'POST',\n            headers: {\n                'content-type': 'application/json',\n            },\n            body: JSON.stringify({user_name, password})\n        })\n            .then(res => {\n                return (!res.ok)\n                    ? res.json().then(e => Promise.reject(e))\n                    : res.json()\n            });\n    },\n    // client-side POST for registering new users. //\n    postUser(user) {\n        return fetch(`${config.API_ENDPOINT}/users`, {\n            method: 'POST',\n            headers: {\n                'content-type': 'application/json',\n            },\n            body: JSON.stringify(user)\n        })\n            .then(res => {\n                return (!res.ok)\n                    ? res.json().then(e => Promise.reject(e))\n                    : res.json()\n            });\n    }\n};\n\nexport default AuthApiService;\n\n","import React, { Component } from 'react';\nimport TokenService from '../Services/token-service';\nimport AuthApiService from '../Services/auth-api-service';\nimport { Link } from 'react-router-dom';\nimport './LoginForm.css';\n\nclass LoginForm extends Component {\n  static defaultProps = {\n    onValidSignUp: () => {},\n    onValidLogin: () => {},\n\n};\n    constructor(props) {\n      super(props)\n      this.state = {\n        newUser: true,\n        right: 0,\n        emailAddress: \"\",\n        password : \"\"\n      }\n    }\n  \n    handleClick(button) {\n      if(this.state.newUser && button != 'signUp') {\n        this.setState({newUser: false})\n      } else if(!this.state.newUser && button != 'signIn') {\n        this.setState({newUser: true})\n      }\n    }\n    \n    // handle login authentication and validation on submit. //\n    handleJwtLoginAuth = e => {\n      e.preventDefault();\n      const {return_user, return_pass} = e.target;\n\n      this.setState({\n          error: null\n      });\n\n      AuthApiService.postLogin({\n          user_name: return_user.value,\n          password: return_pass.value \n      })\n          .then(res => {\n              return_user.value = '';\n              return_pass.value = '';\n              TokenService.saveAuthToken(res.authToken);\n              this.props.onValidLogin();\n          })\n          .then(() => {\n              window.location=`/my-account`;\n          })\n          .catch(res => {\n              this.setState({\n                  error: alert(\"Invalid username or password. Please double-check your credentials.\")\n              });\n          });\n  }\n    \n    render() {\n      return(\n             <div className='formContainer'>\n                <div className='formHeader'>\n                    <div \n                      className={ this.state.newUser ? 'headerActive' : 'headerInActive' } \n                      onClick={() => this.handleClick('signUp')}\n                      >\n                      <button className='headerButton'> Sign Up </button>\n                    </div>\n                    <div \n                      className={ this.state.newUser ? 'headerInActive' : 'headerActive' } \n                      onClick={() => this.handleClick('signIn')}\n                      >\n                      <button className='headerButton'> Sign In </button>\n                    </div>\n                </div>\n                <div className='formBody'>\n                  {\n                    this.state.newUser ? <SignUp />: <SignIn />\n                  }\n                </div>\n                <div className='formFooter'>\n                  <button className='saveForm'> { this.state.newUser ? 'Submit' : 'Login'} </button>\n                  {/* handle submit to login or signup. Once either are completed page updates to main screen as user signed in */}\n                </div>\n             </div>\n      ) \n  \n    }\n  }\n  \n  \n  class SignUp extends Component {\n    render() {\n      return(      \n        <div className='signUpContainer'>\n          <h4 className='headerText'>Join Us Today</h4>\n          <div className='inputSectionSplit'>\n            <input type='text' className='firstName' required/>\n            <label className='inputLabel'>First Name</label>\n          </div>\n          <div className='inputSectionSplit'>\n            <input type='text' className='lastName' required/>\n            <label className='inputLabel'>Last Name</label>\n          </div>\n          <div className='inputSection'>\n            <input type='text' className='emailAddress' required/>\n            <label className='inputLabel'>Email Address</label>\n          </div>\n          <div className='inputSection'>\n            <input type='password' className='password' required/>\n            <label className='inputLabel'>Password</label>\n          </div>\n        </div>\n      )\n    }\n  }\n  \n  class SignIn extends Component {\n    render() {\n      return(\n        <div className='signInContainer'>\n          <h4 className='headerText'>Welcome Back</h4>\n          <div className='inputSection'>\n            <input type='text' className='userName' required/>\n            <label className='inputLabel'>User Name</label>\n          </div>\n          <div className='inputSection'>\n            <input type='text' className='password' required/>\n            <label className='inputLabel'>Password</label>\n          </div>\n          \n        </div>\n      )\n    }\n  }\n \nexport default LoginForm;","import React, { Component } from 'react';\nimport '../About/About.css'\nimport Navbar from '../NavBar/NavBar';\n\nexport default class About extends Component {\n    render(){\n        return (\n            <div>\n             <Navbar />\n            <section className=\"banner\"> \n                <div className=\"Cover\">\n            <h2>SNAP Locator</h2>\n            <p>Connect with SNAP retailers and locations in your area</p>\n            <p>SNAP Store locator is an application that helps users find access to SNAP retailers and grocers.</p>\n            <p> communities suffer disproportionately from illness related to \n            lack of access to fresh and healthy foods.</p>\n            <p>SNAP Store Locator will allow the user to search for retailers and grocers nearby that accept SNAP benefits and also provide a list of \n            food items that are sold.</p>\n           <p> SNAP stands for the Supplemental Nutrition Assistance Program mandated by the Federal Government and supervised by states to help millions of individuals and families who need \n            financial assistance to buy food. Formerly known as the Food Stamp Program, SNAP provides an economic benefit as well as serving to eliminate hunger. </p>\n            </div>\n           </section>\n           </div>\n        );\n    }\n}\n","\nimport React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport Autocomplete from 'react-google-autocomplete';\n// import { Descriptions } from 'antd';\nimport NavBar from '../NavBar/NavBar'\n\n\n\nGeocode.setApiKey(\"AIzaSyDPpPhiwe2nBilWB_ihli85BlyRID4DnpU\");\nGeocode.enableDebug();\n\nclass LocationSearchModal extends React.Component {\n\n    state = {\n        address: '',\n        city: '',\n        area: '',\n        state: '',\n        zoom: 15,\n        height: 400,\n        mapPosition: {\n            lat: 0,\n            lng: 0,\n        },\n        markerPosition: {\n            lat: 0,\n            lng: 0,\n        }\n    }\n\n\n    componentDidMount() {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(position => {\n                this.setState({\n                    mapPosition: {\n                        lat: position.coords.latitude,\n                        lng: position.coords.longitude,\n                    },\n                    markerPosition: {\n                        lat: position.coords.latitude,\n                        lng: position.coords.longitude,\n                    }\n                },\n                    () => {\n                        Geocode.fromLatLng(position.coords.latitude, position.coords.longitude).then(\n                            response => {\n                                console.log(response)\n                                const address = response.results[0].formatted_address,\n                                    addressArray = response.results[0].address_components,\n                                    city = this.getCity(addressArray),\n                                    area = this.getArea(addressArray),\n                                    state = this.getState(addressArray);\n                                console.log('city', city, area, state);\n                                this.setState({\n                                    address: (address) ? address : '',\n                                    area: (area) ? area : '',\n                                    city: (city) ? city : '',\n                                    state: (state) ? state : '',\n                                })\n                            },\n                            error => {\n                                console.error(error);\n                            }\n                        );\n\n                    })\n            });\n        } else {\n            console.error(\"Geolocation is not supported by this browser!\");\n        }\n    };\n    getCity = (addressArray) => {\n        let city = '';\n        for (let i = 0; i < addressArray.length; i++) {\n            if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n                city = addressArray[i].long_name;\n                return city;\n            }\n        }\n    };\n\n    getArea = (addressArray) => {\n        let area = '';\n        for (let i = 0; i < addressArray.length; i++) {\n            if (addressArray[i].types[0]) {\n                for (let j = 0; j < addressArray[i].types.length; j++) {\n                    if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n                        area = addressArray[i].long_name;\n                        return area;\n                    }\n                }\n            }\n        }\n    };\n\n    getState = (addressArray) => {\n        let state = '';\n        for (let i = 0; i < addressArray.length; i++) {\n            for (let i = 0; i < addressArray.length; i++) {\n                if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n                    state = addressArray[i].long_name;\n                    return state;\n                }\n            }\n        }\n    };\n\n    onChange = (event) => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n\n    onInfoWindowClose = (event) => { };\n\n    onMarkerDragEnd = (event) => {\n        let newLat = event.latLng.lat(),\n            newLng = event.latLng.lng();\n\n        Geocode.fromLatLng(newLat, newLng).then(\n            response => {\n                const address = response.results[0].formatted_address,\n                    addressArray = response.results[0].address_components,\n                    city = this.getCity(addressArray),\n                    area = this.getArea(addressArray),\n                    state = this.getState(addressArray);\n                this.setState({\n                    address: (address) ? address : '',\n                    area: (area) ? area : '',\n                    city: (city) ? city : '',\n                    state: (state) ? state : '',\n                    markerPosition: {\n                        lat: newLat,\n                        lng: newLng\n                    },\n                    mapPosition: {\n                        lat: newLat,\n                        lng: newLng\n                    },\n                })\n            },\n            error => {\n                console.error(error);\n            }\n        );\n    };\n\n    onPlaceSelected = (place) => {\n        console.log('plc', place);\n        const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray),\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng();\n\n        console.log('latvalue', latValue)\n        console.log('lngValue', lngValue)\n\n        // Set these values in the state.\n        this.setState({\n            address: (address) ? address : '',\n            area: (area) ? area : '',\n            city: (city) ? city : '',\n            state: (state) ? state : '',\n            markerPosition: {\n                lat: latValue,\n                lng: lngValue\n            },\n            mapPosition: {\n                lat: latValue,\n                lng: lngValue\n            },\n        })\n    };\n\n\n    render() {\n        const AsyncMap = withScriptjs(\n            withGoogleMap(\n                props => (\n                    <GoogleMap\n                        defaultZoom={this.state.zoom}\n                        defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}>\n                        {/* InfoWindow on top of marker */}\n\n                        {/*Marker*/}\n                        <Marker\n                            google={this.props.google}\n                            name={'Dolores park'}\n                            draggable={true}\n                            onDragEnd={this.onMarkerDragEnd}\n                            position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\n                        />\n                        <InfoWindow\n                            onClose={this.onInfoWindowClose}\n                            position={{ lat: (this.state.markerPosition.lat + 0.0018), lng: this.state.markerPosition.lng }}\n                        >\n                            <div>\n                                <span style={{ padding: 0, margin: 0 }}>{this.state.address}</span>\n                            </div>\n                        </InfoWindow>\n                        <Marker />\n                        <Autocomplete\n                            style={{\n                                width: '100%',\n                                height: '40px',\n                                paddingLeft: '16px',\n                                marginTop: '2px',\n                                marginBottom: '2rem'\n                            }}\n                            onPlaceSelected={this.onPlaceSelected}\n                            types={['(regions)']}\n                        />\n                    </GoogleMap>\n                )\n            )\n        );\n\n        return (\n            <div style={{ padding: '1rem', margin: '0 auto', maxWidth: 1000 }}>\n                <NavBar />\n                {/* <Descriptions bordered>\n                    <Descriptions.Item label=\"City\">{this.state.city}</Descriptions.Item>\n                    <Descriptions.Item label=\"Area\">{this.state.area}</Descriptions.Item>\n                    <Descriptions.Item label=\"State\">{this.state.state}</Descriptions.Item>\n                    <Descriptions.Item label=\"Address\">{this.state.address}</Descriptions.Item>\n                </Descriptions> */}\n\n                <AsyncMap\n                    googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDPpPhiwe2nBilWB_ihli85BlyRID4DnpU&libraries=places\"\n                    loadingElement={\n                        <div style={{ height: `100%` }} />\n                    }\n                    containerElement={\n                        <div style={{ height: this.state.height }} />\n                    }\n                    mapElement={\n                        <div style={{ height: `100%` }} />\n                    }\n                />\n            </div>\n        )\n    }\n\n}\n\nexport default LocationSearchModal;","\nimport React, { Component } from 'react';\nimport config from '../src/config';\nimport TokenService from '../src/Components/Services/token-service'\nimport { Switch, Route } from 'react-router';\nimport './App.css';\nimport NavBar from './Components/NavBar/NavBar'\nimport LandingPage from './Components/LandingPage /LandingPage';\nimport LoginForm from '../src/Components/LoginForm/LoginForm'\nimport About from '../src/Components/About/About'\nimport GooglePlaces from './Components/Google Map/GooglePlaces';\n\nclass App extends Component {\n  state  = {\n    stores: []\n  };\n\n  componentDidMount() {\n    if (!TokenService.getAuthToken()){\n   return;\n } \n\n fetch(`${config.API_ENDPOINT}/stores`,{\n   headers: {\n     'authorization': `bearer ${TokenService.getAuthToken()}`\n   }\n })\n \n .then(res => {\n  if (!res.ok) {\n    return res.json().then(e => Promise.reject(e));\n  }\n  return res.json();\n})\n.then(stores => {\n  this.setState({stores});\n})\n.catch(error => {\n  console.error({error});\n})\n}\n\n  render() {\n  //error handler\n  //store context\n\n\n  return (\n    <main className=\"App\">\n    <Switch>\n      <Route path='/NavBar' component={NavBar}/> \n     < Route exact path='/' component={LandingPage}/> \n     < Route exact path='/about' component={About}/> \n      <Route path='/login' component={LoginForm}/>\n      <Route path='/find' component={GooglePlaces}/>\n  </Switch> \n</main>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}